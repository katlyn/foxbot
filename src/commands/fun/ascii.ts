import { CommandClient } from 'eris'

const flip = (text: string): string => {
  let ret = ''
  for (const c of text) {
    if (typeof flipTable[c] === 'string') {
      ret += flipTable[c]
    } else {
      ret += c
    }
  }
  return ret.split('').reverse().join('')
}

export const init = (bot: CommandClient): void => {
  bot.registerCommand('illdoit', () => {
    return '(„Éé„Çú-„Çú )„Éé ‚î¨‚îÄ‚î¨'
  }, {
    hidden: true
  })
  bot.registerCommand('riot', () => {
    return '‚îª‚îÅ‚îªÔ∏µ \\\\(¬∞‚ñ°¬∞)/ Ô∏µ ‚îª‚îÅ‚îª'
  }, {
    hidden: true
  })
  bot.registerCommand('unriot', () => {
    return '‚î¨‚îÄ‚î¨ ·ìï (¬∞w¬∞) ·òÑ ‚î¨‚îÄ‚î¨'
  }, {
    hidden: true
  })
  bot.registerCommand('flip', msg => {
    const text = msg.cleanContent.substring(msg.prefix.length + 'flip'.length).trim()
    return `\`(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ${flip(text)}\``
  }, {
    hidden: true
  })
  bot.registerCommand('unflip', msg => {
    const text = msg.cleanContent.substring(msg.prefix.length + 'unflip'.length).trim()
    return `\`${text} „Éé( „Çú-„Çú„Éé)\``
  }, {
    hidden: true
  })

  bot.registerCommand('ascii', () => {
    return 'ASCII commands\n' +
      '**`illdoit`** - I will, mark my words, I\'ll do it.\n' +
      '**`riot`** - I did it, and there\'s nothing you could have done to stop me.\n' +
      '**`unriot`** - Let\'s just forget that I ever did that.\n' +
      '**`flip`** - Everything\'s going wrong.\n' +
      '**`unflip`** - But maybe we found a solution.'
  }, {
    description: 'Information on the various ASCII commands.'
  })
}

interface FlipTable { [key: string]: string }
/* eslint-disable quote-props */
const flipTable: FlipTable = {
  '0': '0',
  '1': '∆ñ',
  '2': '·ÑÖ',
  '3': '∆ê',
  '4': '„Ñ£',
  '5': 'œõ',
  '6': '9',
  '7': '„Ñ•',
  '8': '8',
  '9': '6',
  'a': '…ê',
  'b': 'q',
  'c': '…î',
  'd': 'p',
  'e': '«ù',
  'f': '…ü',
  'g': '∆É',
  'h': '…•',
  'i': '·¥â',
  'j': '…æ',
  'k': ' û',
  'm': '…Ø',
  'n': 'u',
  'p': 'd',
  'q': 'b',
  'r': '…π',
  't': ' á',
  'u': 'n',
  'v': ' å',
  'w': ' ç',
  'y': ' é',
  'A': '‚àÄ',
  'B': 'êêí',
  'C': '∆Ü',
  'E': '∆é',
  'F': '‚Ñ≤',
  'G': '◊§',
  'H': 'H',
  'I': 'I',
  'J': '≈ø',
  'L': 'À•',
  'M': 'W',
  'N': 'N',
  'P': '‘Ä',
  'T': '‚î¥',
  'U': '‚à©',
  'V': 'Œõ',
  'W': 'M',
  'Y': '‚ÖÑ',
  '.': 'Àô',
  ',': "'",
  "'": ',',
  '"': ',,',
  '`': ',',
  '?': '¬ø',
  '!': '¬°',
  '[': ']',
  ']': '[',
  '(': ')',
  ')': '(',
  '{': '}',
  '}': '{',
  '<': '>',
  '>': '<',
  '&': '‚Öã',
  '_': '‚Äæ',
  '‚à¥': '‚àµ',
  '‚ÅÖ': '‚ÅÜ'
}
/* eslint-enable */

export default {
  init
}
